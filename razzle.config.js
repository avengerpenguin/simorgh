const BrotliPlugin = require('brotli-webpack-plugin');
const CompressionPlugin = require('compression-webpack-plugin');
const OfflinePlugin = require('offline-plugin');

module.exports = {
  modify: (config, { target, dev }) => {
    const appConfig = config;

    if (!dev) {
      /*
        This is a hack to disable linting on the production build.
        Linting is the first object in the rules away and this removes it.
        A prod build will fail if the API changes so it is fairly safe.
      */
      appConfig.module.rules.shift();

      // Setup bundle analyser
      if (target === 'web') {
        // setup bundle splitting
        appConfig.output.filename = 'static/js/[name].[hash:8].js';
        appConfig.optimization = {
          splitChunks: {
            chunks: 'initial',
            automaticNameDelimiter: '-',
            minSize: 184320, // 180kb
            maxSize: 245760, // 240kb
            cacheGroups: {
              vendor: {
                test: /[\\/]node_modules[\\/]/,
                name: 'vendor',
              },
            },
          },
        };

        // Setup service worker and offline support
        appConfig.plugins.push(
          new OfflinePlugin({
            AppCache: false, // because it's deprecated
            appShell: '/news/articles/',
            autoUpdate: 1000 * 60 * 60 * 6, // 6 hours
            // externals means files not generated by webpack
            // an alternative would be html-webpack-plugin
            caches: 'all',
            ServiceWorker: {
              events: true,
              minify: true,
            },
            updateStrategy: 'changed',
          }),
          new BrotliPlugin({
            asset: '[path].br[query]',
            test: /\.js$/,
            threshold: 10240,
            minRatio: 0.8,
          }),
          new CompressionPlugin({
            algorithm: 'gzip',
            filename: '[path].gz[query]',
            test: /\.js$/,
            threshold: 10240,
            minRatio: 0.8,
          }),
        );
      }

      // Setup bundle analyser
      if (target === 'web' && !process.env.CI) {
        // const defined here because it's a dev dep (breaks production build if at top of file)
        const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer'); // eslint-disable-line import/no-extraneous-dependencies, global-require
        appConfig.plugins.push(
          new BundleAnalyzerPlugin({
            analyzerMode: 'static',
            defaultSizes: 'gzip',
            generateStatsFile: true,
            openAnalyzer: false,
            reportFilename: '../../reports/webpackBundleReport.html',
            statsFilename: '../../reports/webpackBundleReport.json',
          }),
        );
      }
    }

    // This is to override bundle performance test
    if (process.env.CI) {
      appConfig.performance = {
        maxAssetSize: 245760, // 240kb - individual bundles
        maxEntrypointSize: 491520, // 480kb - total bundles
      };
    }

    return appConfig;
  },
};
